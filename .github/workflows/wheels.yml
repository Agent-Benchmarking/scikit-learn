# Workflow to build and test wheels
name: Wheels

on:
  # Trigger the workflow on push or pull request on main branch or any release branch
  push:
    branches:
      - main
      - '[0-9]+.[0-9]+.X'
  pull_request:
    branches:
      - main
      - '[0-9]+.[0-9]+.X'
  # Also trigger on workflow_dispatch
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check_build_trigger:
    name: Check if workflow should be run
    runs-on: ubuntu-latest
    outputs:
      build: ${{ steps.check.outputs.build }}
    steps:
      - name: Check if workflow should be run
        id: check
        env:
          # We run the full workflow for github.repository == scikit-learn/scikit-learn 
          # or the Agent-Benchmarking/scikit-learn repo
          REPO_NAME: ${{ github.repository }}
        run: |
          # Run if this is the main scikit-learn repo or the Agent-Benchmarking repo
          if [[ "$REPO_NAME" == "scikit-learn/scikit-learn" || "$REPO_NAME" == "Agent-Benchmarking/scikit-learn" ]]; then
            echo "build=true" >> $GITHUB_OUTPUT
            echo "::notice::Building on repository $REPO_NAME"
          else
            echo "build=false" >> $GITHUB_OUTPUT
            echo "::notice::Skipping build on fork repository $REPO_NAME"
          fi

  # This job checks if the ubuntu-builds workflow has completed
  check_ubuntu_builds:
    name: Check Ubuntu Builds
    needs: check_build_trigger
    if: needs.check_build_trigger.outputs.build == 'true'
    runs-on: ubuntu-latest
    outputs:
      ubuntu_build_status: ${{ steps.check_status.outputs.status }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check Ubuntu Builds workflow status
        id: check_status
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const branch = context.ref.replace('refs/heads/', '');
            
            // Look for the most recent run of the Ubuntu Builds workflow on this branch/PR
            const workflowName = "Ubuntu Builds";
            const workflows = await github.rest.actions.listRepoWorkflows({
              owner,
              repo
            });
            
            const ubuntuWorkflow = workflows.data.workflows.find(w => w.name === workflowName);
            if (!ubuntuWorkflow) {
              core.warning(`Could not find workflow: ${workflowName}. Will continue anyway.`);
              core.setOutput('status', 'not_found');
              return;
            }
            
            // Check for recent runs (completed, in progress, or queued)
            const runs = await github.rest.actions.listWorkflowRuns({
              owner,
              repo,
              workflow_id: ubuntuWorkflow.id,
              branch: branch,
              per_page: 1
            });
            
            if (runs.data.total_count === 0) {
              core.notice(`No runs found for Ubuntu Builds workflow on branch '${branch}'`);
              core.setOutput('status', 'no_runs');
              return;
            }
            
            const latestRun = runs.data.workflow_runs[0];
            const status = latestRun.status;
            const conclusion = latestRun.conclusion;
            
            core.notice(`Latest Ubuntu Builds run: Status=${status}, Conclusion=${conclusion || 'N/A'}`);
            core.notice(`Run URL: ${latestRun.html_url}`);
            
            if (status === 'completed' && conclusion === 'success') {
              core.notice('Ubuntu Builds workflow completed successfully');
              core.setOutput('status', 'success');
            } else if (status === 'in_progress' || status === 'queued') {
              core.notice('Ubuntu Builds workflow is still running, will continue anyway');
              core.setOutput('status', 'in_progress');
            } else if (status === 'completed' && conclusion !== 'success') {
              core.warning('Ubuntu Builds workflow finished but did not succeed. Will continue anyway.');
              core.setOutput('status', 'failed');
            } else {
              core.warning(`Unexpected status: ${status}/${conclusion}`);
              core.setOutput('status', 'unknown');
            }

  # Build the wheels for Linux, Windows and macOS for Python 3.9 and newer
  build_wheels:
    name: Build wheels on ${{ matrix.os }} for ${{ matrix.python }}
    needs: [check_build_trigger, check_ubuntu_builds]
    if: needs.check_build_trigger.outputs.build == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-13]
        python: [cp39, cp310, cp311, cp312]
        exclude:
          # excludes cp39 on Windows and MacOS
          - os: windows-latest
            python: cp39
          - os: macos-13
            python: cp39

    steps:
      - name: Display Ubuntu Builds Status
        run: |
          echo "Ubuntu Builds Status: ${{ needs.check_ubuntu_builds.outputs.ubuntu_build_status }}"
        shell: bash

      - name: Checkout scikit-learn
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Setup MSVC (Windows 64bit)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Build and test wheels and sdist
        uses: pypa/cibuildwheel@v2.16.5
        env:
          CIBW_BUILD: ${{ matrix.python }}-*
          CIBW_ARCHS: auto64
          CIBW_SKIP: "*musllinux*"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_ENVIRONMENT: OMP_NUM_THREADS=2
                            OPENBLAS_NUM_THREADS=2
                            SKLEARN_SKIP_NETWORK_TESTS=1
                            SKLEARN_BUILD_PARALLEL=3
          CIBW_BUILD_VERBOSITY: 1

          # Testing options
          # check because some architectures are emulated and tests would be too slow
          CIBW_TEST_SKIP: "*-macosx_arm64"
          CIBW_TEST_REQUIRES: pytest pandas threadpoolctl
          CIBW_TEST_COMMAND: cd {project} && mkdir -p {project}/tmp_for_test && cd {project}/tmp_for_test && python -m pytest --pyargs sklearn

      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "sklearn-${{ matrix.python }}-${{ matrix.os }}"
          path: ./wheelhouse/*.whl

  # Build the wheels for PyPy 3.9 on Linux
  build_wheels_pypy:
    name: Build wheels on ubuntu-22.04 for PyPy
    needs: [check_build_trigger, check_ubuntu_builds]
    if: needs.check_build_trigger.outputs.build == 'true'
    runs-on: ubuntu-22.04
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        python: [pp39]

    steps:
      - name: Display Ubuntu Builds Status
        run: |
          echo "Ubuntu Builds Status: ${{ needs.check_ubuntu_builds.outputs.ubuntu_build_status }}"
        shell: bash

      - name: Checkout scikit-learn
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Build and test wheels and sdist
        uses: pypa/cibuildwheel@v2.16.5
        env:
          CIBW_BUILD: ${{ matrix.python }}-*
          CIBW_ARCHS: auto64
          CIBW_SKIP: "*musllinux*"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_ENVIRONMENT: OMP_NUM_THREADS=2
                            OPENBLAS_NUM_THREADS=2
                            SKLEARN_SKIP_NETWORK_TESTS=1
                            SKLEARN_BUILD_PARALLEL=3
          CIBW_BUILD_VERBOSITY: 1

          # Testing options
          CIBW_TEST_REQUIRES: pytest pandas threadpoolctl
          CIBW_TEST_COMMAND: cd {project} && mkdir -p {project}/tmp_for_test && cd {project}/tmp_for_test && python -m pytest --pyargs sklearn

      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "sklearn-${{ matrix.python }}-${{ matrix.os }}"
          path: ./wheelhouse/*.whl

  # Build the source distribution
  build_sdist:
    name: Source distribution
    needs: check_build_trigger
    if: needs.check_build_trigger.outputs.build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout scikit-learn
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Build source distribution
        run: |
          pip install -U build
          python -m build --sdist

      - name: Test install source distribution
        run: |
          mkdir tmp_for_test
          cd tmp_for_test
          pip install pytest numpy scipy threadpoolctl
          pip install ../dist/scikit-learn-*.tar.gz
          pytest --pyargs sklearn
          cd ..
          rm -rf tmp_for_test

      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "sklearn-sdist"
          path: dist/scikit-learn-*.tar.gz
