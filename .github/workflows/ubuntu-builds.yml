name: Ubuntu Builds
permissions:
  contents: read

on:
  push:
    branches:
      - main
      # Release branches
      - "[0-9]+.[0-9]+.X"
  pull_request:
    branches:
      - main
      - "[0-9]+.[0-9]+.X"
  # Nightly build
  schedule:
    - cron: "30 2 * * *"
  # Manual run
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # Check commit message for CI skip
  check_commit:
    name: Check commit message
    runs-on: ubuntu-latest
    if: github.repository == 'scikit-learn/scikit-learn'
    outputs:
      commit_message: ${{ steps.get_commit_message.outputs.commit_message }}
      should_skip: ${{ steps.check_skip.outputs.should_skip }}
      should_run_parallel: ${{ steps.check_parallel.outputs.should_run_parallel }}

    steps:
      - name: Checkout scikit-learn
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - id: get_commit_message
        name: Get commit message
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For pull requests, use the last commit message in the PR
            COMMIT_MSG=$(git log -1 --pretty=%B)
          else
            # For pushes, use the last non-merge commit message
            COMMIT_MSG=$(git log --no-merges -1 --pretty=%B)
          fi
          echo "commit_message<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - id: check_skip
        name: Check if CI should be skipped
        run: |
          COMMIT_MSG="${{ steps.get_commit_message.outputs.commit_message }}"
          if [[ "$COMMIT_MSG" =~ \[ci\ skip\] ]]; then
            echo "should_skip=true" >> $GITHUB_OUTPUT
          else
            echo "should_skip=false" >> $GITHUB_OUTPUT
          fi

      - id: check_parallel
        name: Check if builds should run in parallel
        run: |
          COMMIT_MSG="${{ steps.get_commit_message.outputs.commit_message }}"
          if [[ "$COMMIT_MSG" =~ \[azure\ parallel\] ]]; then
            echo "should_run_parallel=true" >> $GITHUB_OUTPUT
          else
            echo "should_run_parallel=false" >> $GITHUB_OUTPUT
          fi

  # Linting job
  linting:
    name: Linting
    runs-on: ubuntu-latest
    needs: [check_commit]
    if: |
      github.repository == 'scikit-learn/scikit-learn' &&
      needs.check_commit.outputs.should_skip != 'true' &&
      !contains(needs.check_commit.outputs.commit_message, '[lint skip]')

    steps:
      - name: Checkout scikit-learn
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install linters
        run: |
          source build_tools/shared.sh
          # Include pytest compatibility with mypy
          pip install pytest $(get_dep ruff min) $(get_dep mypy min) $(get_dep black min) cython-lint

      - name: Run linters
        run: ./build_tools/linting.sh

      - name: Run Meson OpenMP checks
        run: |
          pip install ninja meson scipy
          python build_tools/check-meson-openmp-dependencies.py

  # Ubuntu Jammy Jellyfish build - sequential mode
  ubuntu_jammy_jellyfish:
    name: Ubuntu Jammy Jellyfish
    runs-on: ubuntu-22.04
    needs: [check_commit, linting]
    if: |
      github.repository == 'scikit-learn/scikit-learn' &&
      needs.check_commit.outputs.should_skip != 'true' &&
      needs.check_commit.outputs.should_run_parallel != 'true'

    env:
      TEST_DIR: '/tmp/sklearn_test_folder'
      VIRTUALENV: 'testvenv'
      JUNITXML: 'test-data.xml'
      SKLEARN_SKIP_NETWORK_TESTS: '1'
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPRESS: '1'
      PYTEST_XDIST_VERSION: 'latest'
      COVERAGE: 'false'
      DISTRIB: 'conda'
      LOCK_FILE: './build_tools/azure/pymin_conda_forge_openblas_ubuntu_2204_linux-64_conda.lock'
      SKLEARN_WARNINGS_AS_ERRORS: '1'
      SKLEARN_TESTS_GLOBAL_RANDOM_SEED: '0'  # non-default seed

    steps:
      - name: Checkout scikit-learn
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Check selected tests for all random seeds
        if: github.event_name == 'pull_request'
        run: python build_tools/azure/get_selected_tests.py

      - name: Setup conda
        run: build_tools/azure/install_setup_conda.sh

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-v1-${{ github.job }}-${{ github.run_id }}
          restore-keys: |
            ccache-v1-${{ github.job }}
        continue-on-error: true

      - name: Install dependencies
        run: build_tools/azure/install.sh

      - name: Run tests
        run: build_tools/azure/test_script.sh

      - name: Test documentation
        if: env.SELECTED_TESTS == ''
        run: build_tools/azure/test_docs.sh

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-jammy-test-results
          path: ${{ env.TEST_DIR }}/${{ env.JUNITXML }}
        if: always()

      - name: Upload to codecov
        if: success() && env.COVERAGE == 'true' && env.SELECTED_TESTS == ''
        run: build_tools/azure/upload_codecov.sh

  # Ubuntu Jammy Jellyfish build - parallel mode
  ubuntu_jammy_jellyfish_parallel:
    name: Ubuntu Jammy Jellyfish Parallel
    runs-on: ubuntu-22.04
    needs: [check_commit, linting]
    if: |
      github.repository == 'scikit-learn/scikit-learn' &&
      needs.check_commit.outputs.should_skip != 'true' &&
      needs.check_commit.outputs.should_run_parallel == 'true'

    env:
      TEST_DIR: '/tmp/sklearn_test_folder'
      VIRTUALENV: 'testvenv'
      JUNITXML: 'test-data.xml'
      SKLEARN_SKIP_NETWORK_TESTS: '1'
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPRESS: '1'
      PYTEST_XDIST_VERSION: 'latest'
      COVERAGE: 'false'
      DISTRIB: 'conda'
      LOCK_FILE: './build_tools/azure/pymin_conda_forge_openblas_ubuntu_2204_linux-64_conda.lock'
      SKLEARN_WARNINGS_AS_ERRORS: '1'
      SKLEARN_TESTS_GLOBAL_RANDOM_SEED: '0'  # non-default seed

    steps:
      - name: Checkout scikit-learn
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Check selected tests for all random seeds
        if: github.event_name == 'pull_request'
        run: python build_tools/azure/get_selected_tests.py

      - name: Setup conda
        run: build_tools/azure/install_setup_conda.sh

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-v1-${{ github.job }}-${{ github.run_id }}
          restore-keys: |
            ccache-v1-${{ github.job }}
        continue-on-error: true

      - name: Install dependencies
        run: build_tools/azure/install.sh

      - name: Run tests
        run: build_tools/azure/test_script.sh

      - name: Test documentation
        if: env.SELECTED_TESTS == ''
        run: build_tools/azure/test_docs.sh

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-jammy-parallel-test-results
          path: ${{ env.TEST_DIR }}/${{ env.JUNITXML }}
        if: always()

      - name: Upload to codecov
        if: success() && env.COVERAGE == 'true' && env.SELECTED_TESTS == ''
        run: build_tools/azure/upload_codecov.sh

  # Ubuntu Atlas build - depends on Ubuntu Jammy Jellyfish in sequential mode
  ubuntu_atlas:
    name: Ubuntu Atlas
    runs-on: ubuntu-22.04
    needs: [check_commit, linting, ubuntu_jammy_jellyfish]
    if: |
      always() &&
      github.repository == 'scikit-learn/scikit-learn' &&
      needs.check_commit.outputs.should_skip != 'true' &&
      needs.check_commit.outputs.should_run_parallel != 'true' &&
      (needs.ubuntu_jammy_jellyfish.result == 'success' || needs.ubuntu_jammy_jellyfish.result == 'skipped')

    env:
      TEST_DIR: '/tmp/sklearn_test_folder'
      VIRTUALENV: 'testvenv'
      JUNITXML: 'test-data.xml'
      SKLEARN_SKIP_NETWORK_TESTS: '1'
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPRESS: '1'
      PYTEST_XDIST_VERSION: 'latest'
      COVERAGE: 'false'
      DISTRIB: 'ubuntu'
      LOCK_FILE: './build_tools/azure/ubuntu_atlas_lock.txt'
      SKLEARN_TESTS_GLOBAL_RANDOM_SEED: '1'  # non-default seed

    steps:
      - name: Checkout scikit-learn
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Check selected tests for all random seeds
        if: github.event_name == 'pull_request'
        run: python build_tools/azure/get_selected_tests.py

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-v1-${{ github.job }}-${{ github.run_id }}
          restore-keys: |
            ccache-v1-${{ github.job }}
        continue-on-error: true

      - name: Install dependencies
        run: build_tools/azure/install.sh

      - name: Run tests
        run: build_tools/azure/test_script.sh

      - name: Test documentation
        if: env.SELECTED_TESTS == ''
        run: build_tools/azure/test_docs.sh

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-atlas-test-results
          path: ${{ env.TEST_DIR }}/${{ env.JUNITXML }}
        if: always()

      - name: Upload to codecov
        if: success() && env.COVERAGE == 'true' && env.SELECTED_TESTS == ''
        run: build_tools/azure/upload_codecov.sh

  # Ubuntu Atlas build - runs in parallel with Ubuntu Jammy Jellyfish in parallel mode
  ubuntu_atlas_parallel:
    name: Ubuntu Atlas Parallel
    runs-on: ubuntu-22.04
    needs: [check_commit, linting]
    if: |
      github.repository == 'scikit-learn/scikit-learn' &&
      needs.check_commit.outputs.should_skip != 'true' &&
      needs.check_commit.outputs.should_run_parallel == 'true'

    env:
      TEST_DIR: '/tmp/sklearn_test_folder'
      VIRTUALENV: 'testvenv'
      JUNITXML: 'test-data.xml'
      SKLEARN_SKIP_NETWORK_TESTS: '1'
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPRESS: '1'
      PYTEST_XDIST_VERSION: 'latest'
      COVERAGE: 'false'
      DISTRIB: 'ubuntu'
      LOCK_FILE: './build_tools/azure/ubuntu_atlas_lock.txt'
      SKLEARN_TESTS_GLOBAL_RANDOM_SEED: '1'  # non-default seed

    steps:
      - name: Checkout scikit-learn
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Check selected tests for all random seeds
        if: github.event_name == 'pull_request'
        run: python build_tools/azure/get_selected_tests.py

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-v1-${{ github.job }}-${{ github.run_id }}
          restore-keys: |
            ccache-v1-${{ github.job }}
        continue-on-error: true

      - name: Install dependencies
        run: build_tools/azure/install.sh

      - name: Run tests
        run: build_tools/azure/test_script.sh

      - name: Test documentation
        if: env.SELECTED_TESTS == ''
        run: build_tools/azure/test_docs.sh

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-atlas-parallel-test-results
          path: ${{ env.TEST_DIR }}/${{ env.JUNITXML }}
        if: always()

      - name: Upload to codecov
        if: success() && env.COVERAGE == 'true' && env.SELECTED_TESTS == ''
        run: build_tools/azure/upload_codecov.sh
